{"componentChunkName":"component---src-templates-post-jsx","path":"/binary-search/","result":{"data":{"site":{"siteMetadata":{"title":"🪐"}},"markdownRemark":{"id":"10d45ca2-a845-5978-87e6-b43f90f10b0d","excerpt":"이진탐색이란 이진 탐색은 업다운 게임과 비슷하다. 찾고자 하는 정답이 포함된 범위 중 가운데를 검사하고, 정답과 비교하여 절반의 범위를 제외한다. 장점 선형 탐색(배열이나 리스트의 처음부터 하나씩 찾는 방법)은 원소 개수에 비례하는 의 시간복잡도를 갖는데, 이진 탐색은 공간의 크기를 로 줄여나가므로 의 시간복잡도를 갖는다. 조건 이진 탐색을 적용하려면 배…","html":"<h2>이진탐색이란</h2>\n<p>이진 탐색은 업다운 게임과 비슷하다. 찾고자 하는 정답이 포함된 범위 중 가운데를 검사하고, 정답과 비교하여 절반의 범위를 제외한다.</p>\n<h3>장점</h3>\n<p>선형 탐색<em>(배열이나 리스트의 처음부터 하나씩 찾는 방법)</em>은 원소 개수에 비례하는 <code class=\"language-text\">O(N)</code>의 시간복잡도를 갖는데, 이진 탐색은 공간의 크기를 <code class=\"language-text\">N/2^x</code>로 줄여나가므로 <code class=\"language-text\">O(logN)</code>의 시간복잡도를 갖는다.</p>\n<h3>조건</h3>\n<p>이진 탐색을 적용하려면 배열이나 리스트가 <strong>정렬되어 있어야 한다.</strong></p>\n<h2>탐색 효율 높이기</h2>\n<h3>분할 정복</h3>\n<p>분할 정복은 업다운 게임과 같이 탐색 공간을 특정 기준에 따라 나누고, 나눈 각 탐색 공간에서 탐색을 이어 나가는 방법이다.</p>\n<ol>\n<li>범위 찾기</li>\n<li>\n<p>검사 진행하기</p>\n<p>[start, end]로 표기된 범위에서 범위 내 속한 원소 개수는 <code class=\"language-text\">end - start</code></p>\n<p>탐색 공간이 남아있지 않을 때까지 탐색하려면 <code class=\"language-text\">end-start</code>가 양수일 때 탐색을 계속 반복해야 한다. <code class=\"language-text\">end-start > 0</code> 이므로 <code class=\"language-text\">end > start</code>를 조건으로 하는 반복문으로 탐색을 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">></span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token comment\">// 범위의 중간 검사</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>중간 값 비교하기</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>중간 값을 구했으면 이 값과 찾는 값의 대소를 비교하고, 그에 따라 범위를 적절히 조정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Down</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Up</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>중간값이 찾는 값과 같다면 해당 값의 인덱스인 mid를 반환한다.</p>\n<p><code class=\"language-text\">value</code>가 더 크다면 정답은 더 작은 범위에 있으므로 작은 범위에서 탐색을 이어나가고 <code class=\"language-text\">value</code>가 더 작다면 정답은 더 큰 범위에 있으므로 큰 범위에서 탐색을 이어나가야 한다.</p>\n<p>주의해야 할 점은 <code class=\"language-text\">value > target</code>은 범위를 작은 쪽으로 좁혀야 하고, <code class=\"language-text\">value &lt; target</code>은 범위를 더 큰 쪽으로 좁혀야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tend <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\tstart <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>전체 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> strat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">></span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tend <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n\t\t\tstart <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>정렬 기준 정하기</h3>\n<blockquote>\n<p>이진 탐색을 진행하려면 배열이 정렬되어 있어야 하고, 대부분의 경우 우리가 직접 데이터를 정렬해주어야 한다.</p>\n</blockquote>\n<ol>\n<li>\n<p>정렬방식 선택하기</p>\n<p>이진 탐색을 위해서는 중간값과 정답의 대소를 명확히 구분할 수 있어야 하고, 대소 비교를 하여 정답이 속한 더 작은 범위를 정확히 파악할 수 있어야 한다. 예를 들어, 모든 자릿수의 합이 9인 숫자를 찾는데 오름차순으로 정렬하고 이진 탐색을 적용할 수는 없다.</p>\n<p>따라서 이진 탐색을 적용하려면 문제에서 요구하는 조건을 정확히 파악하고, 이에 따른 대소 비교를 구현하여 데이터를 정렬한 후 진행해야 한다.</p>\n</li>\n<li>\n<p>정렬 규칙 찾기</p>\n<p>이진 탐색 문제의 대부분은 배열이나 리스트를 주고 원소를 찾기보다는 큰 범위의 정답 후보 중 문제 조건에 맞는 정답을 찾아낼 때가 많다. 이때는 문제에서 요구하는 조건의 검사 경과가 정답 후보의 값에 따라 정렬된 상태가 맞는지 확인해 보아야 한다.</p>\n<p>이진 탐색은 정확한 값을 찾는 데도 사용되지만, 정답 조건을 만족하는 값 중 가장 큰 값 또는 가장 작은 값을 찾는 데에도 많이 이용된다.</p>\n<p>정답 조건을 만족하는 값 중 가장 큰 값이나 가장 작은 값을 쉽게 찾으려면 범위 좁히기, 범위 표기법 등을 고민해야 한다.</p>\n</li>\n</ol>\n<h2>자바의 이진탐색 메서드</h2>\n<p>자바에서는 배열과 리스트에 적용할 수 있는 이진 탐색 메서드를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 배열</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 리스트</span></code></pre></div>\n<p><strong>단, 탐색 대상 배열과 리스트는 항상 정렬된 상태여야 한다.</strong></p>\n<p>따라서 배열이나 리스트가 정렬되어 있다고 가정할 수 없다면 <code class=\"language-text\">Arrays.sort()</code>나 <code class=\"language-text\">Collections.sort()</code> 메서드로 배열이나 리스트를 정렬한 후 이진 탐색을 진행해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\\n\n<span class=\"token keyword\">int</span> arrayIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> listIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arrayIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>listIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<p>위 코드에서 숫자 <code class=\"language-text\">8</code>의 인덱스를 찾기 위해 <code class=\"language-text\">Arrays.binarySearch()</code>와 <code class=\"language-text\">Collections.binarySearch()</code> 메서드로 이진 탐색을 진행하면 해당 원소의 인덱스인 <code class=\"language-text\">4</code>를 반환한다.</p>\n<p>만약 찾고자 하는 값이 없다면 어떤 값을 반환할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\\n\n<span class=\"token keyword\">int</span> arrayIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> listIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arrayIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -7</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>listIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -7</span></code></pre></div>\n<p>위 예시처럼 없는 원소를 검색하면 음수가 반환되는데. 이 값을 이용하면 검색하려는 원소가 배열이나 리스트에서 어느 위치에 들어가야 하는지 구할 수 있다. <strong>음수 반환값을 양수로 변환하고 1을 빼면 원소가 들어갈 위치가 된다.</strong></p>\n<p>이진 탐색 메서드는 직접 이진 탐색을 구현하지 않아도 된다는 점에서는 매우 유용하다. 정렬된 배열이나 리스트에서 하나의 원소를 찾아야 할 때 강력한 효율성을 보여준다.</p>\n<p>[참고] 프로그래머스 코딩 테스트 문제 풀이 전략: 자바편</p>","frontmatter":{"title":"🔎 이진탐색과 분할정복","date":"January 10, 2024","update":null,"tags":["algorithm"],"series":"알고리즘 정복하기"},"fields":{"slug":"/binary-search/","readingTime":{"minutes":7.71}}},"seriesList":{"edges":[{"node":{"id":"b9f75b30-18f7-59cb-b7ad-374c3e919856","fields":{"slug":"/dynamic-programming/"},"frontmatter":{"title":"🔥 다이나믹하게 프로그래밍해보자"}}},{"node":{"id":"10d45ca2-a845-5978-87e6-b43f90f10b0d","fields":{"slug":"/binary-search/"},"frontmatter":{"title":"🔎 이진탐색과 분할정복"}}}]},"previous":{"fields":{"slug":"/oop/"},"frontmatter":{"title":"🐟 객체는 붕어빵이 아닙니다"}},"next":{"fields":{"slug":"/rabbitMQ/"},"frontmatter":{"title":"💬 메세지 큐와 RabbitMQ"}}},"pageContext":{"id":"10d45ca2-a845-5978-87e6-b43f90f10b0d","series":"알고리즘 정복하기","previousPostId":"4613fcb8-013a-565b-8338-8ab2ffd92443","nextPostId":"f857ad15-c73d-5eff-8fd6-08c7b25b30aa"}},"staticQueryHashes":[],"slicesMap":{}}