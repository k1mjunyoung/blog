{"componentChunkName":"component---src-templates-post-jsx","path":"/jpa-bulk-update/","result":{"data":{"site":{"siteMetadata":{"title":"김준영의 기술블로그"}},"markdownRemark":{"id":"c97845d8-df86-56e6-8ec4-15770411357d","excerpt":"마주한 이슈 JPA로 List를 받아와서 수정 후  하는 기존 로직에서 hibernate 로그가 수없이 뜨는 걸 발견, JPA가 데이터 수만큼 건별로 Update하기 때문 Bulk update 벌크 업데이트를 위해선  어노테이션을 사용해야 한다. SpringDataJPA가 해당 리포지토리 메소드가 SELECT문인지 UPDATE문인지 알아야 Return T…","html":"<h2>마주한 이슈</h2>\n<p>JPA로 List를 받아와서 수정 후 <code class=\"language-text\">saveAll()</code> 하는 기존 로직에서 hibernate 로그가 수없이 뜨는 걸 발견, JPA가 데이터 수만큼 건별로 Update하기 때문</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tbl080Block</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByRejectNum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> rejectNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Bulk update</h2>\n<p>벌크 업데이트를 위해선 <code class=\"language-text\">@Modifying</code> 어노테이션을 사용해야 한다.</p>\n<blockquote>\n<p>SpringDataJPA가 해당 리포지토리 메소드가 SELECT문인지 UPDATE문인지 알아야 Return Type을 결정하는데, 아직은 내부적으로 Query만 보고 판단을 못해서, 명시를 해줘야 Return type을 결정하기 때문입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Modifying</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE TBL_080_BLOCK SET EXP_DT = :nowDt WHERE REJECT_NUM = :rejectNum\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">updateExpDtByRejectNum</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rejectNum\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> rejectNum<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nowDt\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">LocalDateTime</span> nowDt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>사용 시 주의사항</h3>\n<p>벌크 업데이트를 할 때, 주의사항이 있다.</p>\n<p>1차 캐시라고 불리는 <strong>영속성 컨텍스트</strong> 때문인데, <strong>벌크 업데이트는 단일 업데이트와 다르게 영속성 컨텍스트에 있는 엔티티를 변경하지 않는다.</strong></p>\n<blockquote>\n<p>내부적인 동작은 아래와 같이 동작합니다.</p>\n<ol>\n<li>영속성 컨텍스트에 엔터티 2개를 추가 + 쓰기 지연 SQL 저장소에 INSERT문 저장</li>\n<li>영속성 컨텍스트를 flush(JPQL 실행 때문) -> <strong>쓰기 지연 SQL 저장소에만 UPDATE문 저장</strong></li>\n<li>영속성 컨텍스트에서 엔터티 조회</li>\n<li>Update문이 적용되지 않은 값을 반환</li>\n</ol>\n</blockquote>\n<p>해결방법은 벌크 업데이트로 인해 변경된 값을 참조해야 한다면, 영속성 컨텍스트를 DB에 반영하고 영속성 컨텍스트를 비워야 한다. 그렇게 되면, 해당 값을 참조할 때 영속성 컨텍스트가 아니라 DB에 직접 접근하게 되어서 반영된(업데이트된) 값을 가져올 수 있다.</p>\n<p><code class=\"language-text\">@Modifying</code> 의 <code class=\"language-text\">clearAutomatically</code> 옵션을 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Modifying</span><span class=\"token punctuation\">(</span>clearAutomatically <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE TBL_080_BLOCK SET EXP_DT = :nowDt WHERE REJECT_NUM = :rejectNum\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">updateExpDtByRejectNum</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rejectNum\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> rejectNum<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nowDt\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">LocalDateTime</span> nowDt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>트랜젝션?</h3>\n<p>위와 같이 네이티브 쿼리를 적용하니 또 다른 에러가 발생했는데, Transaction 관련 에러였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">javax.persistence.TransactionRequiredException:Executing an update/delete query </code></pre></div>\n<p><code class=\"language-text\">@Transactional</code> 어노테이션을 붙이니 해결되었는데 트랜잭션에 대한 공부는 추후에..</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token annotation punctuation\">@Modifying</span><span class=\"token punctuation\">(</span>clearAutomatically <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE TBL_080_BLOCK SET EXP_DT = :nowDt WHERE REJECT_NUM = :rejectNum\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">updateExpDtByRejectNum</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rejectNum\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> rejectNum<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nowDt\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">LocalDateTime</span> nowDt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>[참고] <a href=\"https://jaehoney.tistory.com/151\">https://jaehoney.tistory.com/151</a></p>","frontmatter":{"title":"💪 JPA 대량 데이터 한번에 UPDATE하기","date":"March 29, 2024","update":null,"tags":["jpa"],"series":null},"fields":{"slug":"/jpa-bulk-update/","readingTime":{"minutes":3.05}}},"seriesList":{"edges":[{"node":{"id":"c9468df6-f697-5562-acc9-c32d901d5c22","fields":{"slug":"/clean-code/"},"frontmatter":{"title":"🔎 클린코드 훑어보기"}}},{"node":{"id":"cc30409f-f6be-5aeb-8e8b-abc91ad74891","fields":{"slug":"/oop/"},"frontmatter":{"title":"🐟 객체는 붕어빵이 아닙니다"}}},{"node":{"id":"0b702e91-b3b6-5698-8d9b-c98049554b92","fields":{"slug":"/rabbitMQ/"},"frontmatter":{"title":"💬 메세지 큐와 RabbitMQ"}}},{"node":{"id":"c97845d8-df86-56e6-8ec4-15770411357d","fields":{"slug":"/jpa-bulk-update/"},"frontmatter":{"title":"💪 JPA 대량 데이터 한번에 UPDATE하기"}}}]},"previous":{"fields":{"slug":"/rabbitMQ/"},"frontmatter":{"title":"💬 메세지 큐와 RabbitMQ"}},"next":null},"pageContext":{"id":"c97845d8-df86-56e6-8ec4-15770411357d","series":null,"previousPostId":"0b702e91-b3b6-5698-8d9b-c98049554b92","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}