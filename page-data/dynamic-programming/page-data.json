{"componentChunkName":"component---src-templates-post-jsx","path":"/dynamic-programming/","result":{"data":{"site":{"siteMetadata":{"title":"🪐"}},"markdownRemark":{"id":"bca57240-39f6-50d6-96f5-e7b663f81479","excerpt":"다이나믹 프로그래밍이란? 다이나믹 프로그래밍(Dynamic Programming, DP)이란 하나의 문제를 단 한 번만 풀도록 하는 알고리즘이다. 일반적으로 분할 정복 기법은 동일한 문제를 다시 푼다는 단점을 가지고 있다. 단순 분할 정복으로 풀게 되면 심각한 비효율성을 낳는 대표적인 예시로는 피보나치 수열이 있다. 📜 피보나치 수열과 분할 정복 피보나치…","html":"<h2>다이나믹 프로그래밍이란?</h2>\n<blockquote>\n<p><strong>다이나믹 프로그래밍(Dynamic Programming, DP)</strong>이란 하나의 문제를 단 한 번만 풀도록 하는 알고리즘이다.</p>\n</blockquote>\n<p>일반적으로 분할 정복 기법은 동일한 문제를 다시 푼다는 단점을 가지고 있다. 단순 분할 정복으로 풀게 되면 심각한 비효율성을 낳는 대표적인 예시로는 피보나치 수열이 있다.</p>\n<h2>📜 피보나치 수열과 분할 정복</h2>\n<p>피보나치 수열은 <strong>특정한 숫자를 구하기 위해 그 앞에 있는 숫자와 두 칸 앞에 있는 숫자의 합</strong>을 구해야 한다.</p>\n<blockquote>\n<p>피보나치 수열 점화식: <code class=\"language-text\">D[i] = D[i-1] + D[i-2]</code></p>\n</blockquote>\n<p>피보나치 수열의 초기 값은 <code class=\"language-text\">1</code> 로 고정되므로 위 점화식에 적용하면 <code class=\"language-text\">1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...</code> 와 같이 나아갈 수 있다.\n만약 단순 분할 정복 기법을 이용해 피보나치 수열을 푼다면 어떻게 될까?</p>\n<p><img src=\"https://velog.velcdn.com/images/1998/post/1392ab01-7f62-4f5b-87e5-30a623405193/image.png\" alt=\"출처: https://blog.naver.com/ndb796/221233570962\"></p>\n<p>단순 분할 정복으로 피보나치 수열의 15번째 값인 <code class=\"language-text\">D[15]</code> 를 구하려면 <code class=\"language-text\">D[14]</code> 와 <code class=\"language-text\">D[13]</code> 을 계산해야 하고, <code class=\"language-text\">D[14]</code> 를 구하려면 <code class=\"language-text\">D[13]</code> 과 <code class=\"language-text\">D[12]</code> 를 계산해야 한다.\n이렇게 단순한 분할 정복 기법을 사용하면 이미 수행한 계산를 또 반복적으로 수행하기 때문에 <strong>굉장히!</strong> 비효율적이게 된다.</p>\n<p>아래는 단순하게 피보나치 수열을 구하는 과정을 JAVA로 구현한 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">fybo</code> 메서드(함수)에 <code class=\"language-text\">10</code> 을 넣으면 피보나치 수열의 10번째 값인 <code class=\"language-text\">55</code> 가 잘 출력된다. <strong>만약 <code class=\"language-text\">fybo</code> 메서드에 <code class=\"language-text\">50</code> 을 넣으면 어떻게 될까?</strong>\n.\n.\n.\n<em>아마 우주가 멸망할 때까지 CPU가 달궈지고 결국엔 실행되지 않을 것이다...</em>😮</p>\n<p>이는 사실 당연한 결과로, 피보나치 수열이 1개만 증가해도 <strong>계산량은 2배로 늘어난다.</strong> 위와 같은 방법으로 피보나치 수열의 50번째 값을 구하려면 2의 50제곱 즉, 1,000,000,000,000,000개가 넘는 계산량을 컴퓨터가 처리해야 한다는 것이다.</p>\n<h2>🔥 DP의 등장</h2>\n<p>다이나믹 프로그래밍은 다음의 두 가정 하에 사용할 수 있다.</p>\n<blockquote>\n<ol>\n<li>큰 문제를 작은 문제로 나눌 수 있다.</li>\n<li>작은 문제에서 구한 정답이 그 문제를 포함하는 큰 문제에서도 동일하다.</li>\n</ol>\n</blockquote>\n<p>쉽게 말해, 크고 어려운 문제를 잘게 나누어 해결한 뒤에 전체의 답을 구하는 방법이다. 다만 이 과정에서 분할 정복과 다른 점은 <strong>메모이제이션(Memoization)</strong>이 사용된다는 것이다. <u>이미 계산한 결과는 배열에 저장함으로써</u> 나중에 동일한 계산을 해야 할 때 배열에서 꺼내오기만 하면 된다.</p>\n<h3>📝 메모이제이션</h3>\n<blockquote>\n<p><strong>메모이제이션(Memoization)</strong>이란 동일한 계산을 반복해야 할 때 <u>이미 계산한 결과를 메모리(배열)에 저장</u>해 두었다가 필요할 때 꺼내 씀으로써 중복 계산을 방지할 수 있게 하는 기법이다.</p>\n</blockquote>\n<p>다이나믹 프로그래밍의 메모이제이션 기법을 활용하면 우주멸망을 막을 수 있다(?)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 다이나믹 프로그래밍의 메모이제이션 기법을 활용해 작성한 JAVA 코드이다.</p>\n<p>이미 계산된 결과는 배열 <code class=\"language-text\">d</code> 에 저장되기 때문에 한 번 구한 값을 다시 계산하는 일은 없으므로 <strong>순식간에!</strong> 피보나치 수열의 30번째 값이 구해지는 것을 볼 수 있다.(50번째 값은 매우 크기 때문에 오버플로우가 발생하여 음수값이 나온다. 알고 싶다면 <code class=\"language-text\">int</code> 타입 대신 <code class=\"language-text\">long</code> 타입을 사용하자)</p>\n<h2>마무리</h2>\n<p><a href=\"https://www.acmicpc.net/problem/1463\">백준 1463번</a>을 다이나믹하게 풀어보아요</p>\n<h3>ref</h3>\n<ul>\n<li><a href=\"https://www.google.com/\" target=\"_blank\">[이것이 코딩테스트다] 저자, 나동빈님 블로그</a></li>\n</ul>","frontmatter":{"title":"🔥 다이나믹하게 프로그래밍해보자","date":"November 27, 2023","update":"November 27, 2023","tags":["algorithm"],"series":"알고리즘 정복하기"},"fields":{"slug":"/dynamic-programming/","readingTime":{"minutes":5.63}}},"seriesList":{"edges":[{"node":{"id":"bca57240-39f6-50d6-96f5-e7b663f81479","fields":{"slug":"/dynamic-programming/"},"frontmatter":{"title":"🔥 다이나믹하게 프로그래밍해보자"}}},{"node":{"id":"79d1bc1c-9be7-540c-bce6-61fc86dea6f1","fields":{"slug":"/binary-search/"},"frontmatter":{"title":"🔎 이진탐색과 분할정복"}}}]},"previous":{"fields":{"slug":"/clean-code/"},"frontmatter":{"title":"🔎 클린코드 훑어보기"}},"next":{"fields":{"slug":"/oop/"},"frontmatter":{"title":"🐟 객체는 붕어빵이 아닙니다"}}},"pageContext":{"id":"bca57240-39f6-50d6-96f5-e7b663f81479","series":"알고리즘 정복하기","previousPostId":"9c548896-5498-5cc6-8f2c-07cb3884d770","nextPostId":"126bdf0a-89db-59af-9b03-d0df58e5dc58"}},"staticQueryHashes":[],"slicesMap":{}}