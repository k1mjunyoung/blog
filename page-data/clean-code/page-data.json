{"componentChunkName":"component---src-templates-post-jsx","path":"/clean-code/","result":{"data":{"site":{"siteMetadata":{"title":"🪐"}},"markdownRemark":{"id":"9c548896-5498-5cc6-8f2c-07cb3884d770","excerpt":"더러운 코드도 돌아는 간다. 하지만 코드가 깨끗하지 못하면 개발 조직은 기어간다. 매년 지저분한 코드로 수많은 시간과 상당한 자원이 낭비된다. 그래야 할 이유가 없다. 로버트 마틴은 이 책에서 혁명적인 패러다임을 제시한다. 코드를 읽어야 한다. 아주 많은 코드를. 그리고 코드를 읽으면서 그 코드의 무엇이 옳은지, 그른지 생각도 해야 한다. 좀 더 중요하게…","html":"<p>더러운 코드도 돌아는 간다. 하지만 코드가 깨끗하지 못하면 개발 조직은 기어간다. 매년 지저분한 코드로 수많은 시간과 상당한 자원이 낭비된다. 그래야 할 이유가 없다. 로버트 마틴은 이 책에서 혁명적인 패러다임을 제시한다. 코드를 읽어야 한다. 아주 많은 코드를. 그리고 코드를 읽으면서 그 코드의 무엇이 옳은지, 그른지 생각도 해야 한다. 좀 더 중요하게는 전문가로서 자신이 지니는 가치와 장인으로서 자기 작품(프로그램)에 대한 헌신을 돌아보게 된다. 코드를 읽고, 짜고 정리하는 과정에서 우리가 생각하는 방식을 묘사한 지식 기반을 얻는다.</p>\n<h2>1. 의도를 분명히 밝혀라</h2>\n<p>변수의 존재 이유, 기능, 사용법 등이 변수, 함수, 클래스명에 드러나야 한다. 의미를 함축하거나 독자가 사전지식을 갖고 있다고 가정하지 말자.</p>\n<h2>2. 그릇된 정보를 피하라</h2>\n<p>중의적으로 해석될 수 있는 이름을 지양하고 개발자에게는 특수한 의미를 가지는 단어를 변수명에 붙이지 말자. 또한 비슷해 보이는 명명에 주의하자</p>\n<h2>3. 의미 있게 구분하라</h2>\n<p>말이 안되는 단어, 숫자(a1, a2..)로 구분하는 것을 피하고 클래스 이름에 info, data와 같은 불용어를 붙이지 말자.</p>\n<h2>4. 발음하기 쉬운 이름을 사용하라</h2>\n<h2>5. 검색하기 쉬운 이름을 사용하라</h2>\n<p>상수는 static final과 같이 정의해서 사용하자. 변수 이름의 길이는 변수의 범위에 비례해서 길어진다.</p>\n<h2>6. 자신의 기억력을 자랑하지 마라</h2>\n<p>독자가 한번 더 생각해 변환해야 할 만한 변수명을 쓰지 말자. 똑똑한 프로그래머와 전문가 프로그래머를 나누는 기준은 <strong>명료함</strong>이다.</p>\n<h2>7. 클래스 이름에 대해</h2>\n<p>동사 대신 명사 혹은 명사구를 사용하고 Manager, Processor, Data, Info와 같은 단어는 피하자.</p>\n<h2>8. 메서드 이름</h2>\n<p>동사 혹은 동사구를 사용하고 접근자, 변경자, 조건자는 get, set, is로 시작하자. 생성자를 오버로드할 경우 정적 팩토리 메서드를 사용하고, 해당 생성자를 private로 선언하자.</p>\n<h2>9. 기발한 이름은 피하라</h2>\n<p>특정 문화에서만 사용되는 재미있는 이름보다 의도를 분명히 표현하는 이름을 사용하자.</p>\n<h2>10. 한 개념에 한 단어를 사용하라</h2>\n<p>추상적인 개념 하나에 단어 하나를 사용하자</p>\n<h2>11. 해법 영역(Solution Domain) 용어를 사용하자</h2>\n<p>개발자라면 당연히 알고 있을 JobQueue, AccountVisitor 등을 사용하지 않을 이유가 없다. 전산용어, 알고리즘 이름, 패턴 이름, 수학적 용어 등은 피하자.</p>\n<h2>12. 문제 영역(Problem Domain) 용어를 사용하자</h2>\n<p>적절한 프로그래머 용어가 없거나 문제 영역과 관련이 깊은 용어의 경우 문제 영역 용어를 사용하자.</p>\n<h2>13. 의미 있는 맥락을 추가하라</h2>\n<p>클래스, 함수, namespace 등으로 감싸서 맥락을 표현하라. 그래도 불분명하다면 접두어를 사용하자.</p>","frontmatter":{"title":"🔎 클린코드 훑어보기","date":"July 10, 2023","update":"July 10, 2023","tags":["clean-code"],"series":null},"fields":{"slug":"/clean-code/","readingTime":{"minutes":4.45}}},"seriesList":{"edges":[{"node":{"id":"9c548896-5498-5cc6-8f2c-07cb3884d770","fields":{"slug":"/clean-code/"},"frontmatter":{"title":"🔎 클린코드 훑어보기"}}},{"node":{"id":"126bdf0a-89db-59af-9b03-d0df58e5dc58","fields":{"slug":"/oop/"},"frontmatter":{"title":"🐟 객체는 붕어빵이 아닙니다"}}}]},"previous":null,"next":{"fields":{"slug":"/dynamic-programming/"},"frontmatter":{"title":"🔥 다이나믹하게 프로그래밍해보자"}}},"pageContext":{"id":"9c548896-5498-5cc6-8f2c-07cb3884d770","series":null,"previousPostId":null,"nextPostId":"bca57240-39f6-50d6-96f5-e7b663f81479"}},"staticQueryHashes":[],"slicesMap":{}}